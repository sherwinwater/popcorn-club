{"ast":null,"code":"var _jsxFileName = \"/Users/yumie/Desktop/Programming/Project/MyProject/popcorn-club/client/src/components/movies/MovieCard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport tmdb from '../../apis/tmdb';\nimport styles from './MovieCard.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieCard = props => {\n  const handleSearchDetail = () => {\n    const searchDetail = async () => {\n      const response = await tmdb.get('/movie/550?api_key=8a45061d820fb7b5b5f574766f028ff6');\n      console.log(response.data);\n    };\n\n    searchDetail();\n  };\n\n  const calcYear = date => {\n    const year = date === null || date === void 0 ? void 0 : date.split('-')[0];\n    return year;\n  };\n\n  const renderMovies = () => {\n    // This is very importantn when you fetch data because otherwise props.movies would be undefined until data is fetched, and it creates a whole confuses...\n    if (!props.movies) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 14\n      }, this);\n    }\n\n    return props.movies.map(movie => {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: `/detail/${movie.id}`,\n        className: `${styles.card} ${styles[props.cname]}` // onClick={handleSearchDetail}\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.img,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: styles.poster,\n            src: props.cname ? `https://image.tmdb.org/t/p/original${movie.backdrop_path}` : `https://image.tmdb.org/t/p/original${movie.poster_path}`,\n            alt: movie.original_title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), props.cname ? '' : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.title,\n          children: movie.original_title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), props.cname ? '' : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.date,\n          children: calcYear(movie.release_date)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: renderMovies()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n};\n\n_c = MovieCard;\n\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state.movies.favorite);\n  return {\n    movies: state.movies[ownProps.type]\n  };\n};\n\nexport default connect(mapStateToProps)(MovieCard); // const MovieCard = (props) => {\n//   const renderMovies = () => {\n//     props.movies.map((movie) => {\n//       return (\n//         <li>\n//           <img src=\"\" alt=\"\" />\n//           <h4>{movie.title}</h4>\n//           <p>{movie.year}</p>\n//         </li>\n//       );\n//     });\n//   };\n//   return (\n//     <div>\n//       <img src=\"\" alt=\"\" />\n//       <h4>title</h4>\n//       <p>year</p>\n//     </div>\n//   );\n// };\n// export default MovieCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieCard\");","map":{"version":3,"sources":["/Users/yumie/Desktop/Programming/Project/MyProject/popcorn-club/client/src/components/movies/MovieCard.js"],"names":["React","connect","Link","tmdb","styles","MovieCard","props","handleSearchDetail","searchDetail","response","get","console","log","data","calcYear","date","year","split","renderMovies","movies","map","movie","id","card","cname","img","poster","backdrop_path","poster_path","original_title","title","release_date","mapStateToProps","state","ownProps","favorite","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport tmdb from '../../apis/tmdb';\nimport styles from './MovieCard.module.css';\n\nconst MovieCard = (props) => {\n  const handleSearchDetail = () => {\n    const searchDetail = async () => {\n      const response = await tmdb.get(\n        '/movie/550?api_key=8a45061d820fb7b5b5f574766f028ff6'\n      );\n\n      console.log(response.data);\n    };\n\n    searchDetail();\n  };\n\n  const calcYear = (date) => {\n    const year = date?.split('-')[0];\n    return year;\n  };\n\n  const renderMovies = () => {\n    // This is very importantn when you fetch data because otherwise props.movies would be undefined until data is fetched, and it creates a whole confuses...\n    if (!props.movies) {\n      return <div>Loading...</div>;\n    }\n\n    return props.movies.map((movie) => {\n      return (\n        <Link\n          to={`/detail/${movie.id}`}\n          key={movie.id}\n          className={`${styles.card} ${styles[props.cname]}`}\n          // onClick={handleSearchDetail}\n        >\n          <div className={styles.img}>\n            <img\n              className={styles.poster}\n              src={\n                props.cname\n                  ? `https://image.tmdb.org/t/p/original${movie.backdrop_path}`\n                  : `https://image.tmdb.org/t/p/original${movie.poster_path}`\n              }\n              alt={movie.original_title}\n            />\n          </div>\n          {props.cname ? (\n            ''\n          ) : (\n            <p className={styles.title}>{movie.original_title}</p>\n          )}\n          {props.cname ? (\n            ''\n          ) : (\n            <p className={styles.date}>{calcYear(movie.release_date)}</p>\n          )}\n        </Link>\n      );\n    });\n  };\n\n  return <React.Fragment>{renderMovies()}</React.Fragment>;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state.movies.favorite);\n  return {\n    movies: state.movies[ownProps.type],\n  };\n};\n\nexport default connect(mapStateToProps)(MovieCard);\n\n// const MovieCard = (props) => {\n//   const renderMovies = () => {\n//     props.movies.map((movie) => {\n//       return (\n//         <li>\n//           <img src=\"\" alt=\"\" />\n//           <h4>{movie.title}</h4>\n//           <p>{movie.year}</p>\n//         </li>\n//       );\n//     });\n//   };\n\n//   return (\n//     <div>\n//       <img src=\"\" alt=\"\" />\n//       <h4>title</h4>\n//       <p>year</p>\n//     </div>\n//   );\n// };\n\n// export default MovieCard;\n"]},"metadata":{},"sourceType":"module"}