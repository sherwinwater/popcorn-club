{"ast":null,"code":"var _jsxFileName = \"/Users/yumie/Desktop/Programming/Project/MyProject/popcorn-club/src/pages/Movies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport * as AiIcons from 'react-icons/ai';\nimport tmdb from '../apis/tmdb';\nimport MovieRow from '../components/movies/MovieRow';\nimport styles from './Movies.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = 'https://image.tmdb.org/t/p/original'; // const url =\n//   'https://api.themoviedb.org/3/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6';\n\nconst Movies = () => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [curSlide, setCurSlide] = useState(0); // const [activeIndex, setActiveIndex] = useState(0);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      // try to fetch only english movies\n      const response = await tmdb.get('/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6'); // console.log(response.data.results);\n\n      console.log(response.data.results.slice(0, 3));\n      setMovies(response.data.results.slice(0, 10));\n    };\n\n    fetchData();\n  }, []);\n\n  const truncate = (str, n) => {\n    return (str === null || str === void 0 ? void 0 : str.length) > n ? `${str.substr(0, n - 1)}...` : str;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.movies,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.title,\n      children: \"Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieRow, {\n      url: \"/movie/upcoming?api_key=8a45061d820fb7b5b5f574766f028ff6\",\n      category: \"Upcoming\",\n      cname: \"wide\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieRow, {\n      url: \"/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6\",\n      category: \"Popular\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieRow, {\n      url: \"/movie/top_rated?api_key=8a45061d820fb7b5b5f574766f028ff6\",\n      category: \"Top Rated\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieRow, {\n      url: \"/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6\",\n      category: \"Popular\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this); // as props: category(popular, toprated...),\n}; // const Row = ({ title, fetchUrl, isLargeRow }) => {\n//   const [movies, setMovies] = useState([]);\n//   const [trailerUrl, setTrailerUrl] = useState('');\n//   // Run once when the row loads, and don't run again.\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const response = await tmdb.get(fetchUrl);\n//       // console.log(response.data.results);\n//       setMovies(response.data.results);\n//     };\n//     fetchData();\n//   }, [fetchUrl]);\n//   const opts = {\n//     height: '390',\n//     width: '100%',\n//     playerVars: {\n//       autoplay: 1,\n//     },\n//   };\n//   // console.log(movies);\n//   const onClick = (movie) => {\n//     if (trailerUrl) {\n//       setTrailerUrl('');\n//     } else {\n//       movieTrailer(movie?.name || '')\n//         .then((url) => {\n//           const urlParams = new URLSearchParams(new URL(url).search);\n//           console.log(urlParams);\n//           setTrailerUrl(urlParams.get('v'));\n//         })\n//         .catch((err) => console.log(err));\n//     }\n//   };\n//   // poser_path looks like \"/2ST6l4WP7ZfqAetuttBqx8F3AAH.jpg\", and that's not a complete url. We need to append that to the base_url.\n//   const renderedMovies = movies.map((movie) => {\n//     return (\n//       <img\n//         onClick={() => onClick(movie)}\n//         className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\n//         src={`${base_url}${\n//           isLargeRow ? movie.poster_path : movie.backdrop_path\n//         }`}\n//         alt={movie.name}\n//         key={movie.id}\n//       />\n//     );\n//   });\n//   return (\n//     <div className=\"row\">\n//       <h2>{title}</h2>\n//       <div className=\"row__posters\">{renderedMovies}</div>\n//       {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n//     </div>\n//   );\n// };\n\n\n_s(Movies, \"7X1IlCN8JBrgXzZIK7TWjwMZ0MQ=\");\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Users/yumie/Desktop/Programming/Project/MyProject/popcorn-club/src/pages/Movies.js"],"names":["React","useState","useEffect","AiIcons","tmdb","MovieRow","styles","base_url","Movies","movies","setMovies","curSlide","setCurSlide","fetchData","response","get","console","log","data","results","slice","truncate","str","n","length","substr","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,QAAQ,GAAG,qCAAjB,C,CACA;AACA;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,CAAD,CAAxC,CAFmB,CAGnB;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,SAAS,GAAG,YAAY;AAC5B;AACA,YAAMC,QAAQ,GAAG,MAAMV,IAAI,CAACW,GAAL,CACrB,yDADqB,CAAvB,CAF4B,CAM5B;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAAT,CAAcC,OAAd,CAAsBC,KAAtB,CAA4B,CAA5B,EAA+B,CAA/B,CAAZ;AACAV,MAAAA,SAAS,CAACI,QAAQ,CAACI,IAAT,CAAcC,OAAd,CAAsBC,KAAtB,CAA4B,CAA5B,EAA+B,EAA/B,CAAD,CAAT;AACD,KATD;;AAWAP,IAAAA,SAAS;AACV,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAMQ,QAAQ,GAAG,CAACC,GAAD,EAAMC,CAAN,KAAY;AAC3B,WAAO,CAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEE,MAAL,IAAcD,CAAd,GAAmB,GAAED,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcF,CAAC,GAAG,CAAlB,CAAqB,KAA1C,GAAiDD,GAAxD;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAEhB,MAAM,CAACG,MAAvB;AAAA,4BACE;AAAI,MAAA,SAAS,EAAEH,MAAM,CAACoB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,QAAD;AACE,MAAA,GAAG,EAAC,0DADN;AAEE,MAAA,QAAQ,EAAC,UAFX;AAGE,MAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,YAHF,eAQE,QAAC,QAAD;AACE,MAAA,GAAG,EAAC,yDADN;AAEE,MAAA,QAAQ,EAAC;AAFX;AAAA;AAAA;AAAA;AAAA,YARF,eAYE,QAAC,QAAD;AACE,MAAA,GAAG,EAAC,2DADN;AAEE,MAAA,QAAQ,EAAC;AAFX;AAAA;AAAA;AAAA;AAAA,YAZF,eAgBE,QAAC,QAAD;AACE,MAAA,GAAG,EAAC,yDADN;AAEE,MAAA,QAAQ,EAAC;AAFX;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAxBmB,CAgDnB;AACD,CAjDD,C,CAmDA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAhHMlB,M;;KAAAA,M;AAkHN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as AiIcons from 'react-icons/ai';\nimport tmdb from '../apis/tmdb';\nimport MovieRow from '../components/movies/MovieRow';\nimport styles from './Movies.module.css';\n\nconst base_url = 'https://image.tmdb.org/t/p/original';\n// const url =\n//   'https://api.themoviedb.org/3/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [curSlide, setCurSlide] = useState(0);\n  // const [activeIndex, setActiveIndex] = useState(0);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      // try to fetch only english movies\n      const response = await tmdb.get(\n        '/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6'\n      );\n\n      // console.log(response.data.results);\n      console.log(response.data.results.slice(0, 3));\n      setMovies(response.data.results.slice(0, 10));\n    };\n\n    fetchData();\n  }, []);\n\n  const truncate = (str, n) => {\n    return str?.length > n ? `${str.substr(0, n - 1)}...` : str;\n  };\n\n  return (\n    <div className={styles.movies}>\n      <h3 className={styles.title}>Movies</h3>\n\n      <MovieRow\n        url=\"/movie/upcoming?api_key=8a45061d820fb7b5b5f574766f028ff6\"\n        category=\"Upcoming\"\n        cname=\"wide\"\n      />\n      <MovieRow\n        url=\"/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6\"\n        category=\"Popular\"\n      />\n      <MovieRow\n        url=\"/movie/top_rated?api_key=8a45061d820fb7b5b5f574766f028ff6\"\n        category=\"Top Rated\"\n      />\n      <MovieRow\n        url=\"/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6\"\n        category=\"Popular\"\n      />\n    </div>\n  );\n\n  // as props: category(popular, toprated...),\n};\n\n// const Row = ({ title, fetchUrl, isLargeRow }) => {\n//   const [movies, setMovies] = useState([]);\n//   const [trailerUrl, setTrailerUrl] = useState('');\n\n//   // Run once when the row loads, and don't run again.\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const response = await tmdb.get(fetchUrl);\n//       // console.log(response.data.results);\n//       setMovies(response.data.results);\n//     };\n\n//     fetchData();\n//   }, [fetchUrl]);\n\n//   const opts = {\n//     height: '390',\n//     width: '100%',\n//     playerVars: {\n//       autoplay: 1,\n//     },\n//   };\n\n//   // console.log(movies);\n\n//   const onClick = (movie) => {\n//     if (trailerUrl) {\n//       setTrailerUrl('');\n//     } else {\n//       movieTrailer(movie?.name || '')\n//         .then((url) => {\n//           const urlParams = new URLSearchParams(new URL(url).search);\n//           console.log(urlParams);\n//           setTrailerUrl(urlParams.get('v'));\n//         })\n//         .catch((err) => console.log(err));\n//     }\n//   };\n\n//   // poser_path looks like \"/2ST6l4WP7ZfqAetuttBqx8F3AAH.jpg\", and that's not a complete url. We need to append that to the base_url.\n//   const renderedMovies = movies.map((movie) => {\n//     return (\n//       <img\n//         onClick={() => onClick(movie)}\n//         className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\n//         src={`${base_url}${\n//           isLargeRow ? movie.poster_path : movie.backdrop_path\n//         }`}\n//         alt={movie.name}\n//         key={movie.id}\n//       />\n//     );\n//   });\n\n//   return (\n//     <div className=\"row\">\n//       <h2>{title}</h2>\n//       <div className=\"row__posters\">{renderedMovies}</div>\n//       {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n//     </div>\n//   );\n// };\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}