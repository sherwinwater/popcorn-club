{"ast":null,"code":"var _jsxFileName = \"/Users/yumie/Desktop/Programming/Project/MyProject/popcorn-club/src/pages/Movies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchMoviePopular, fetchMovieUpcoming, fetchMovieTopRated } from '../actions';\nimport MovieHeader from '../components/movies/MovieHeader';\nimport MovieRow from '../components/movies/MovieRow';\nimport styles from './Movies.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = 'https://image.tmdb.org/t/p/original'; // const url =\n//   'https://api.themoviedb.org/3/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6';\n\nconst Movies = props => {\n  _s();\n\n  useEffect(() => {\n    // props.fetchMoviePopular();\n    props.fetchMovieUpcoming(); // props.fetchMovieTopRated();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.movies,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.title,\n      children: \"Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieRow, {\n      url: \"/movie/upcoming?api_key=8a45061d820fb7b5b5f574766f028ff6\",\n      category: \"Upcoming\",\n      type: \"upcoming\",\n      cname: \"wide\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieRow, {\n      url: \"/movie/top_rated?api_key=8a45061d820fb7b5b5f574766f028ff6\",\n      category: \"Top Rated\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this); // as props: category(popular, toprated...),\n}; // const Row = ({ title, fetchUrl, isLargeRow }) => {\n//   const [movies, setMovies] = useState([]);\n//   const [trailerUrl, setTrailerUrl] = useState('');\n//   // Run once when the row loads, and don't run again.\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const response = await tmdb.get(fetchUrl);\n//       // console.log(response.data.results);\n//       setMovies(response.data.results);\n//     };\n//     fetchData();\n//   }, [fetchUrl]);\n//   const opts = {\n//     height: '390',\n//     width: '100%',\n//     playerVars: {\n//       autoplay: 1,\n//     },\n//   };\n//   // console.log(movies);\n//   const onClick = (movie) => {\n//     if (trailerUrl) {\n//       setTrailerUrl('');\n//     } else {\n//       movieTrailer(movie?.name || '')\n//         .then((url) => {\n//           const urlParams = new URLSearchParams(new URL(url).search);\n//           console.log(urlParams);\n//           setTrailerUrl(urlParams.get('v'));\n//         })\n//         .catch((err) => console.log(err));\n//     }\n//   };\n//   // poser_path looks like \"/2ST6l4WP7ZfqAetuttBqx8F3AAH.jpg\", and that's not a complete url. We need to append that to the base_url.\n//   const renderedMovies = movies.map((movie) => {\n//     return (\n//       <img\n//         onClick={() => onClick(movie)}\n//         className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\n//         src={`${base_url}${\n//           isLargeRow ? movie.poster_path : movie.backdrop_path\n//         }`}\n//         alt={movie.name}\n//         key={movie.id}\n//       />\n//     );\n//   });\n//   return (\n//     <div className=\"row\">\n//       <h2>{title}</h2>\n//       <div className=\"row__posters\">{renderedMovies}</div>\n//       {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n//     </div>\n//   );\n// };\n\n\n_s(Movies, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Movies;\nexport default connect(null, {\n  fetchMoviePopular: fetchMoviePopular,\n  fetchMovieUpcoming: fetchMovieUpcoming,\n  fetchMovieTopRated: fetchMovieTopRated\n})(Movies);\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Users/yumie/Desktop/Programming/Project/MyProject/popcorn-club/src/pages/Movies.js"],"names":["React","useEffect","connect","fetchMoviePopular","fetchMovieUpcoming","fetchMovieTopRated","MovieHeader","MovieRow","styles","base_url","Movies","props","movies","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,iBADF,EAEEC,kBAFF,EAGEC,kBAHF,QAIO,YAJP;AAKA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,QAAQ,GAAG,qCAAjB,C,CACA;AACA;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxBV,EAAAA,SAAS,CAAC,MAAM;AACd;AACAU,IAAAA,KAAK,CAACP,kBAAN,GAFc,CAGd;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACE;AAAK,IAAA,SAAS,EAAEI,MAAM,CAACI,MAAvB;AAAA,4BACE;AAAI,MAAA,SAAS,EAAEJ,MAAM,CAACK,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AACE,MAAA,GAAG,EAAC,0DADN;AAEE,MAAA,QAAQ,EAAC,UAFX;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,KAAK,EAAC;AAJR;AAAA;AAAA;AAAA;AAAA,YAHF,eAaE,QAAC,QAAD;AACE,MAAA,GAAG,EAAC,2DADN;AAEE,MAAA,QAAQ,EAAC;AAFX;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAPwB,CA4BxB;AACD,CA7BD,C,CA+BA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA5FMH,M;;KAAAA,M;AA8FN,eAAeR,OAAO,CAAC,IAAD,EAAO;AAC3BC,EAAAA,iBAAiB,EAAEA,iBADQ;AAE3BC,EAAAA,kBAAkB,EAAEA,kBAFO;AAG3BC,EAAAA,kBAAkB,EAAEA;AAHO,CAAP,CAAP,CAIZK,MAJY,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  fetchMoviePopular,\n  fetchMovieUpcoming,\n  fetchMovieTopRated,\n} from '../actions';\nimport MovieHeader from '../components/movies/MovieHeader';\nimport MovieRow from '../components/movies/MovieRow';\nimport styles from './Movies.module.css';\n\nconst base_url = 'https://image.tmdb.org/t/p/original';\n// const url =\n//   'https://api.themoviedb.org/3/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6';\n\nconst Movies = (props) => {\n  useEffect(() => {\n    // props.fetchMoviePopular();\n    props.fetchMovieUpcoming();\n    // props.fetchMovieTopRated();\n  }, []);\n\n  return (\n    <div className={styles.movies}>\n      <h3 className={styles.title}>Movies</h3>\n      <MovieHeader />\n      <MovieRow\n        url=\"/movie/upcoming?api_key=8a45061d820fb7b5b5f574766f028ff6\"\n        category=\"Upcoming\"\n        type=\"upcoming\"\n        cname=\"wide\"\n      />\n      {/* <MovieRow\n        url=\"/movie/popular?api_key=8a45061d820fb7b5b5f574766f028ff6\"\n        category=\"Popular\"\n      /> */}\n      <MovieRow\n        url=\"/movie/top_rated?api_key=8a45061d820fb7b5b5f574766f028ff6\"\n        category=\"Top Rated\"\n      />\n    </div>\n  );\n\n  // as props: category(popular, toprated...),\n};\n\n// const Row = ({ title, fetchUrl, isLargeRow }) => {\n//   const [movies, setMovies] = useState([]);\n//   const [trailerUrl, setTrailerUrl] = useState('');\n\n//   // Run once when the row loads, and don't run again.\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const response = await tmdb.get(fetchUrl);\n//       // console.log(response.data.results);\n//       setMovies(response.data.results);\n//     };\n\n//     fetchData();\n//   }, [fetchUrl]);\n\n//   const opts = {\n//     height: '390',\n//     width: '100%',\n//     playerVars: {\n//       autoplay: 1,\n//     },\n//   };\n\n//   // console.log(movies);\n\n//   const onClick = (movie) => {\n//     if (trailerUrl) {\n//       setTrailerUrl('');\n//     } else {\n//       movieTrailer(movie?.name || '')\n//         .then((url) => {\n//           const urlParams = new URLSearchParams(new URL(url).search);\n//           console.log(urlParams);\n//           setTrailerUrl(urlParams.get('v'));\n//         })\n//         .catch((err) => console.log(err));\n//     }\n//   };\n\n//   // poser_path looks like \"/2ST6l4WP7ZfqAetuttBqx8F3AAH.jpg\", and that's not a complete url. We need to append that to the base_url.\n//   const renderedMovies = movies.map((movie) => {\n//     return (\n//       <img\n//         onClick={() => onClick(movie)}\n//         className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\n//         src={`${base_url}${\n//           isLargeRow ? movie.poster_path : movie.backdrop_path\n//         }`}\n//         alt={movie.name}\n//         key={movie.id}\n//       />\n//     );\n//   });\n\n//   return (\n//     <div className=\"row\">\n//       <h2>{title}</h2>\n//       <div className=\"row__posters\">{renderedMovies}</div>\n//       {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n//     </div>\n//   );\n// };\n\nexport default connect(null, {\n  fetchMoviePopular: fetchMoviePopular,\n  fetchMovieUpcoming: fetchMovieUpcoming,\n  fetchMovieTopRated: fetchMovieTopRated,\n})(Movies);\n"]},"metadata":{},"sourceType":"module"}