{"ast":null,"code":"var _jsxFileName = \"/Users/yumie/Desktop/Programming/Project/MyProject/popcorn-club/src/components/movies/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport tmdb from '../../apis/tmdb';\nimport Category from './Category';\nimport Contents from './Contents';\nimport styles from './Row.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Row = props => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      // try to fetch only english movies\n      const response = await tmdb.get(props.url);\n      console.log(response.data.results);\n      setMovies(response.data.results);\n    };\n\n    fetchData();\n  }, []); // Make a condition: if it's a wide row, put a classname for wide container, wide contents.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles.container} ${styles[props.cname]}`,\n    children: [/*#__PURE__*/_jsxDEV(Category, {\n      category: props.category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Contents, {\n      movies: movies,\n      cname: props.cname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/yumie/Desktop/Programming/Project/MyProject/popcorn-club/src/components/movies/Row.js"],"names":["React","useState","useEffect","tmdb","Category","Contents","styles","Row","props","movies","setMovies","fetchData","response","get","url","console","log","data","results","container","cname","category"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AAAA;;AACrB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,SAAS,GAAG,YAAY;AAC5B;AACA,YAAMC,QAAQ,GAAG,MAAMT,IAAI,CAACU,GAAL,CAASL,KAAK,CAACM,GAAf,CAAvB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,IAAT,CAAcC,OAA1B;AACAR,MAAAA,SAAS,CAACE,QAAQ,CAACK,IAAT,CAAcC,OAAf,CAAT;AACD,KAND;;AAQAP,IAAAA,SAAS;AACV,GAVQ,EAUN,EAVM,CAAT,CAHqB,CAerB;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAG,GAAEL,MAAM,CAACa,SAAU,IAAGb,MAAM,CAACE,KAAK,CAACY,KAAP,CAAc,EAA3D;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEZ,KAAK,CAACa;AAA1B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,MAAM,EAAEZ,MAAlB;AAA0B,MAAA,KAAK,EAAED,KAAK,CAACY;AAAvC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAvBD;;GAAMb,G;;KAAAA,G;AAyBN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport tmdb from '../../apis/tmdb';\nimport Category from './Category';\nimport Contents from './Contents';\nimport styles from './Row.module.css';\n\nconst Row = (props) => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      // try to fetch only english movies\n      const response = await tmdb.get(props.url);\n\n      console.log(response.data.results);\n      setMovies(response.data.results);\n    };\n\n    fetchData();\n  }, []);\n\n  // Make a condition: if it's a wide row, put a classname for wide container, wide contents.\n\n  return (\n    <div className={`${styles.container} ${styles[props.cname]}`}>\n      <Category category={props.category} />\n      <Contents movies={movies} cname={props.cname} />\n    </div>\n  );\n};\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}