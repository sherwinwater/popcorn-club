{"ast":null,"code":"var _jsxFileName = \"/Users/yumie/Desktop/Programming/Project/MyProject/popcorn-club/client/src/components/movies/MovieCard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport tmdb from '../../apis/tmdb';\nimport styles from './MovieCard.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieCard = props => {\n  // const handleSearchDetail = () => {\n  //   const searchDetail = async () => {\n  //     const response = await tmdb.get(\n  //       '/movie/550?api_key=8a45061d820fb7b5b5f574766f028ff6'\n  //     );\n  //     console.log(response.data);\n  //   };\n  //   searchDetail();\n  // };\n  const calcYear = date => {\n    const year = date === null || date === void 0 ? void 0 : date.split('-')[0];\n    return year;\n  };\n\n  const renderMovies = () => {\n    // This is very importantn when you fetch data because otherwise props.movies would be undefined until data is fetched, and it creates a whole confuses...\n    if (!props.movies) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 14\n      }, this);\n    }\n\n    return props.movies.map(movie => {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: `/detail/${movie.id}`,\n        className: `${styles.card} ${styles[props.cname]}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.img,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: styles.poster,\n            src: props.cname ? `https://image.tmdb.org/t/p/original${movie.backdrop_path}` : `https://image.tmdb.org/t/p/original${movie.poster_path}`,\n            alt: movie.original_title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), props.cname ? '' : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.title,\n          children: movie.original_title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), props.cname ? '' : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.date,\n          children: calcYear(movie.release_date)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: renderMovies()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n\n_c = MovieCard;\n\nconst mapStateToProps = (state, ownProps) => {\n  // console.log(state.movies.favorite);\n  return {\n    movies: state.movies[ownProps.type]\n  };\n};\n\nexport default connect(mapStateToProps)(MovieCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieCard\");","map":{"version":3,"sources":["/Users/yumie/Desktop/Programming/Project/MyProject/popcorn-club/client/src/components/movies/MovieCard.js"],"names":["React","connect","Link","tmdb","styles","MovieCard","props","calcYear","date","year","split","renderMovies","movies","map","movie","id","card","cname","img","poster","backdrop_path","poster_path","original_title","title","release_date","mapStateToProps","state","ownProps","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA,QAAMC,QAAQ,GAAIC,IAAD,IAAU;AACzB,UAAMC,IAAI,GAAGD,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAb;AACA,WAAOD,IAAP;AACD,GAHD;;AAKA,QAAME,YAAY,GAAG,MAAM;AACzB;AACA,QAAI,CAACL,KAAK,CAACM,MAAX,EAAmB;AACjB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,WAAON,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAkBC,KAAD,IAAW;AACjC,0BACE,QAAC,IAAD;AACE,QAAA,EAAE,EAAG,WAAUA,KAAK,CAACC,EAAG,EAD1B;AAGE,QAAA,SAAS,EAAG,GAAEX,MAAM,CAACY,IAAK,IAAGZ,MAAM,CAACE,KAAK,CAACW,KAAP,CAAc,EAHnD;AAAA,gCAKE;AAAK,UAAA,SAAS,EAAEb,MAAM,CAACc,GAAvB;AAAA,iCACE;AACE,YAAA,SAAS,EAAEd,MAAM,CAACe,MADpB;AAEE,YAAA,GAAG,EACDb,KAAK,CAACW,KAAN,GACK,sCAAqCH,KAAK,CAACM,aAAc,EAD9D,GAEK,sCAAqCN,KAAK,CAACO,WAAY,EALhE;AAOE,YAAA,GAAG,EAAEP,KAAK,CAACQ;AAPb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBALF,EAgBGhB,KAAK,CAACW,KAAN,GACC,EADD,gBAGC;AAAG,UAAA,SAAS,EAAEb,MAAM,CAACmB,KAArB;AAAA,oBAA6BT,KAAK,CAACQ;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAnBJ,EAqBGhB,KAAK,CAACW,KAAN,GACC,EADD,gBAGC;AAAG,UAAA,SAAS,EAAEb,MAAM,CAACI,IAArB;AAAA,oBAA4BD,QAAQ,CAACO,KAAK,CAACU,YAAP;AAApC;AAAA;AAAA;AAAA;AAAA,gBAxBJ;AAAA,SAEOV,KAAK,CAACC,EAFb;AAAA;AAAA;AAAA;AAAA,cADF;AA6BD,KA9BM,CAAP;AA+BD,GArCD;;AAuCA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAA,cAAiBJ,YAAY;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA1DD;;KAAMN,S;;AA4DN,MAAMoB,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C;AACA,SAAO;AACLf,IAAAA,MAAM,EAAEc,KAAK,CAACd,MAAN,CAAae,QAAQ,CAACC,IAAtB;AADH,GAAP;AAGD,CALD;;AAOA,eAAe3B,OAAO,CAACwB,eAAD,CAAP,CAAyBpB,SAAzB,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport tmdb from '../../apis/tmdb';\nimport styles from './MovieCard.module.css';\n\nconst MovieCard = (props) => {\n  // const handleSearchDetail = () => {\n  //   const searchDetail = async () => {\n  //     const response = await tmdb.get(\n  //       '/movie/550?api_key=8a45061d820fb7b5b5f574766f028ff6'\n  //     );\n\n  //     console.log(response.data);\n  //   };\n\n  //   searchDetail();\n  // };\n\n  const calcYear = (date) => {\n    const year = date?.split('-')[0];\n    return year;\n  };\n\n  const renderMovies = () => {\n    // This is very importantn when you fetch data because otherwise props.movies would be undefined until data is fetched, and it creates a whole confuses...\n    if (!props.movies) {\n      return <div>Loading...</div>;\n    }\n\n    return props.movies.map((movie) => {\n      return (\n        <Link\n          to={`/detail/${movie.id}`}\n          key={movie.id}\n          className={`${styles.card} ${styles[props.cname]}`}\n        >\n          <div className={styles.img}>\n            <img\n              className={styles.poster}\n              src={\n                props.cname\n                  ? `https://image.tmdb.org/t/p/original${movie.backdrop_path}`\n                  : `https://image.tmdb.org/t/p/original${movie.poster_path}`\n              }\n              alt={movie.original_title}\n            />\n          </div>\n          {props.cname ? (\n            ''\n          ) : (\n            <p className={styles.title}>{movie.original_title}</p>\n          )}\n          {props.cname ? (\n            ''\n          ) : (\n            <p className={styles.date}>{calcYear(movie.release_date)}</p>\n          )}\n        </Link>\n      );\n    });\n  };\n\n  return <React.Fragment>{renderMovies()}</React.Fragment>;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  // console.log(state.movies.favorite);\n  return {\n    movies: state.movies[ownProps.type],\n  };\n};\n\nexport default connect(mapStateToProps)(MovieCard);\n"]},"metadata":{},"sourceType":"module"}